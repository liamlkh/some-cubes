{"version":3,"sources":["Cubes.js","App.js","index.js"],"names":["Cube","pos","useBox","mass","args","position","x","Math","random","y","rotation","PI","ref","api","origin","THREE","vec","useEffect","subscribe","p","set","dist","distanceTo","forceArray","normalize","multiplyScalar","toArray","applyForce","attach","clearcoat","clearcoatRoughness","roughness","metalness","Cubes","curvePoints","getPoints","slice","useRef","useThree","mouse","camera","useMemo","rEuler","rQuaternion","useFrame","current","quaternion","slerp","setFromEuler","map","i","Collider","viewport","state","useSphere","type","width","height","App","dpr","gl","alpha","stencil","depth","antialias","fov","onCreated","toneMappingExposure","intensity","color","gravity","iterations","broadphase","multisampling","samples","radius","luminanceInfluence","target","href","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.9df48741.chunk.js","sourcesContent":["import { useEffect, useRef, useMemo } from \"react\"\nimport * as THREE from \"three\"\nimport { useFrame, useThree } from \"@react-three/fiber\"\nimport { useBox } from \"@react-three/cannon\"\n\nconst RADIUS = 5\n\nconst Cube = ({ pos }) => {\n\n  const [ref, api] = useBox(() => ({\n    mass: 1,\n    args: [0.8, 0.8, 0.8],\n    position: [pos.x + (Math.random() * 2 - 1) * 10, pos.y + (Math.random() * 2 - 1) * 10, (Math.random() * 2 - 1) * 5],\n    rotation: [Math.PI * 2 * Math.random(), Math.PI * 2 * Math.random(), Math.PI * 2 * Math.random()]\n  }))\n\n  const origin = new THREE.Vector3(0, 0, 0)\n  const vec = new THREE.Vector3()\n\n  useEffect(() => {\n    api.position.subscribe((p) => {\n      vec.set(p[0], p[1], 0)\n      const dist = RADIUS - vec.distanceTo(origin)\n      const forceArray = vec.normalize().multiplyScalar(dist * 3).toArray()\n\n      //z\n      forceArray[2] = 0 - p[2] * 3\n\n      api.applyForce(forceArray, [0, 0, 0])\n    })\n  }, [api])\n\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry attach=\"geometry\" args={[0.8, 0.8, 0.8]} />\n      <meshPhysicalMaterial clearcoat={0.8} clearcoatRoughness={0} roughness={1} metalness={0.7} />\n    </mesh>\n  )\n}\n\nexport default function Cubes() {\n\n  const curve = new THREE.EllipseCurve(\n    0, 0,  // xCenter, yCenter\n    RADIUS, RADIUS, // xRadius, yRadius\n    0, Math.PI * 2, // startAngle, endAngle\n    true,  // clockwise\n    0 // rotation\n  )\n  const curvePoints = curve.getPoints(120).slice(0, -1)\n\n  const ref = useRef()\n  const { camera, mouse } = useThree()\n  const [rEuler, rQuaternion] = useMemo(() => [new THREE.Euler(), new THREE.Quaternion()], [])\n\n  useFrame(() => {\n    rEuler.set(-mouse.y * Math.PI * 0.02, mouse.x * Math.PI * 0.08, 0)\n    ref.current.quaternion.slerp(rQuaternion.setFromEuler(rEuler), 0.1)\n  })\n\n  return (\n    <group ref={ref}>\n      {curvePoints.map((pos, i) => <Cube key={i} pos={pos}/>)}\n    </group>\n  )\n}\n","import { Canvas, useFrame, useThree } from \"@react-three/fiber\"\nimport { Physics, useSphere } from \"@react-three/cannon\"\nimport { EffectComposer, SSAO } from \"@react-three/postprocessing\";\nimport Cubes from './Cubes'\n\nconst Collider = () => {\n  const viewport = useThree((state) => state.viewport)\n  const [ref, api] = useSphere(() => ({ \n    type: \"Kinematic\", \n    args: 1\n  }))\n\n  useFrame((state) => {\n    api.position.set((state.mouse.x * viewport.width) / 2, (state.mouse.y * viewport.height) / 2, 0)\n  })\n\n  return null\n  // return (\n  //   <mesh ref={ref}>\n  //     <sphereGeometry attach=\"geometry\" args={[1]} />\n  //     <meshBasicMaterial color='#a87ea0' />\n  //   </mesh>\n  // )\n}\n\nexport const App = () => (\n  <>\n    <Canvas\n      dpr={1.5}\n      gl={{ alpha: true, stencil: false, depth: false, antialias: false }}\n      camera={{ position: [0, 0, 30], fov: 35 }}\n      onCreated={state => state.gl.toneMappingExposure = 1.5}\n    >\n      <ambientLight intensity={0.75} />\n      <directionalLight position={[0, 5, 4]} intensity={4} />\n      <directionalLight position={[0, -15, 0]} intensity={4} color=\"#a87ea0\" />\n      <pointLight position={[-30, 0, 20]} color=\"blue\" intensity={0.8} /> \n      <pointLight position={[30, 0, 20]} color=\"red\" intensity={0.8} /> \n      <Physics gravity={[0, 0, 0]} iterations={1} broadphase=\"SAP\">\n        <Collider/>\n        <Cubes/>\n      </Physics>\n      <EffectComposer multisampling={0}>\n        <SSAO samples={11} radius={30} intensity={30} luminanceInfluence={0.6} color=\"#9c6892\" />\n        <SSAO samples={21} radius={5} intensity={30} luminanceInfluence={0.6} color=\"#9c6892\" />\n      </EffectComposer>\n    </Canvas>\n    <footer>\n      three.js sketch by <a target=\"_blank\" href=\"https://liamlkh.github.io/\" >liamlkh</a>\n    </footer>\n  </>\n)\n","import ReactDOM from \"react-dom\"\nimport { Suspense } from \"react\"\nimport { App } from \"./App\"\nimport \"./styles.css\"\n\nReactDOM.render(\n  <>\n    <Suspense fallback={null}>\n      <App />\n    </Suspense>\n  </>,\n  document.getElementById(\"root\"),\n)\n"],"sourceRoot":""}